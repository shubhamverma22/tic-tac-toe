{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/shubhamverma/Desktop/LCOREACT/tic-tac-toe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport Icon from \"./components/Icon\"; //Toastify\n\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\"; //REactStrap\n\nimport { Button, Container, Col, Row, Card, CardBody } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\nconst itemsArray = new Array(9).fill(\"empty\");\n\nconst App = () => {\n  _s();\n\n  const [isCross, setisCross] = useState(false);\n  const [winMessage, setWinMessage] = useState(\"\");\n\n  const reloadGame = () => {\n    setisCross(false);\n    setWinMessage(\"\");\n    itemsArray.fill(\"empty\", 0, 9);\n  };\n\n  const checkIsWinner = () => {\n    if (itemsArray[0] !== \"empty\" && itemsArray[0] === itemsArray[1] && itemsArray[0] === itemsArray[2]) {\n      setWinMessage(`${itemsArray[0]} wins`);\n    } else if (itemsArray[1] !== \"empty\" && itemsArray[1] === itemsArray[2] && itemsArray[1] === itemsArray[3]) {\n      setWinMessage(`${itemsA}`);\n    }\n  };\n\n  const changeitem = itemNumber => {\n    if (winMessage) {\n      return toast(winMessage, {\n        type: \"success\"\n      });\n    }\n\n    if (itemsArray[itemNumber] === \"empty\") {\n      itemsArray[itemNumber] = isCross ? \"cross\" : \"circle\";\n      setisCross(!isCross);\n    } else {\n      return toast(\"already filled\", {\n        type: \"error\"\n      });\n    }\n\n    checkIsWinner();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"p-5\",\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {\n      position: \"bottom-center\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        md: 6,\n        className: \"offset-md-3\",\n        children: [winMessage ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-2 mt-2\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-success text-uppercase text-center\",\n            children: winMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            color: \"success\",\n            block: true,\n            onClick: reloadGame,\n            children: \"Reload The Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 7\n        }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-center text-warning\",\n          children: [isCross ? \"cross\" : \"Circle\", \" Turns\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid\",\n          children: itemsArray.map((item, index) => /*#__PURE__*/_jsxDEV(Card, {\n            color: \"warning\",\n            onClick: () => changeitem(index),\n            children: /*#__PURE__*/_jsxDEV(CardBody, {\n              className: \"box\",\n              children: /*#__PURE__*/_jsxDEV(Icon, {\n                name: item\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 10\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 8\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"yC9RmnNAHni2pOtpVJKds0AvC7w=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/shubhamverma/Desktop/LCOREACT/tic-tac-toe/src/App.js"],"names":["React","useState","Icon","ToastContainer","toast","Button","Container","Col","Row","Card","CardBody","itemsArray","Array","fill","App","isCross","setisCross","winMessage","setWinMessage","reloadGame","checkIsWinner","itemsA","changeitem","itemNumber","type","map","item","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport Icon from \"./components/Icon\";\n\n//Toastify\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n//REactStrap\nimport { Button, Container, Col, Row, Card, CardBody } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\n\nconst itemsArray = new Array(9).fill(\"empty\");\n\nconst App = () => {\n\tconst [isCross, setisCross] = useState(false);\n\tconst [winMessage, setWinMessage] = useState(\"\");\n\n\tconst reloadGame = () => {\n\t\tsetisCross(false);\n\t\tsetWinMessage(\"\");\n\t\titemsArray.fill(\"empty\", 0, 9);\n\t};\n\tconst checkIsWinner = () => {\n\t\tif (\n\t\t\titemsArray[0] !== \"empty\" &&\n\t\t\titemsArray[0] === itemsArray[1] &&\n\t\t\titemsArray[0] === itemsArray[2]\n\t\t) {\n\t\t\tsetWinMessage(`${itemsArray[0]} wins`);\n\t\t} else if (\n\t\t\titemsArray[1] !== \"empty\" &&\n\t\t\titemsArray[1] === itemsArray[2] &&\n\t\t\titemsArray[1] === itemsArray[3]\n\t\t) {\n      setWinMessage(`${itemsA}`)\n\t\t}\n\t};\n\tconst changeitem = (itemNumber) => {\n\t\tif (winMessage) {\n\t\t\treturn toast(winMessage, { type: \"success\" });\n\t\t}\n\t\tif (itemsArray[itemNumber] === \"empty\") {\n\t\t\titemsArray[itemNumber] = isCross ? \"cross\" : \"circle\";\n\t\t\tsetisCross(!isCross);\n\t\t} else {\n\t\t\treturn toast(\"already filled\", { type: \"error\" });\n\t\t}\n\n\t\tcheckIsWinner();\n\t};\n\n\treturn (\n\t\t<Container className=\"p-5\">\n\t\t\t<ToastContainer position=\"bottom-center\" />\n\t\t\t<Row>\n\t\t\t\t<Col md={6} className=\"offset-md-3\">\n\t\t\t\t\t{winMessage ? (\n\t\t\t\t\t\t<div className=\"mb-2 mt-2\">\n\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\t{/*margin-bottom  margin-top */}\n\t\t\t\t\t\t\t<h1 className=\"text-success text-uppercase text-center\">\n\t\t\t\t\t\t\t\t{winMessage}\n\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t\t{/* button to reset */}\n\t\t\t\t\t\t\t<Button color=\"success\" block onClick={reloadGame}>\n\t\t\t\t\t\t\t\tReload The Game\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<h1 className=\"text-center text-warning\">\n\t\t\t\t\t\t\t{isCross ? \"cross\" : \"Circle\"} Turns\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t)}\n\t\t\t\t\t<div className=\"grid\">\n\t\t\t\t\t\t{itemsArray.map((item, index) => (\n\t\t\t\t\t\t\t<Card color=\"warning\" onClick={() => changeitem(index)}>\n\t\t\t\t\t\t\t\t<CardBody className=\"box\">\n\t\t\t\t\t\t\t\t\t<Icon name={item} />\n\t\t\t\t\t\t\t\t</CardBody>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</Container>\n\t);\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}